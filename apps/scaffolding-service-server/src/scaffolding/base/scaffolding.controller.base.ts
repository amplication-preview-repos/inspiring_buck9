/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScaffoldingService } from "../scaffolding.service";
import { ScaffoldingCreateInput } from "./ScaffoldingCreateInput";
import { Scaffolding } from "./Scaffolding";
import { ScaffoldingFindManyArgs } from "./ScaffoldingFindManyArgs";
import { ScaffoldingWhereUniqueInput } from "./ScaffoldingWhereUniqueInput";
import { ScaffoldingUpdateInput } from "./ScaffoldingUpdateInput";
import { MaterialFindManyArgs } from "../../material/base/MaterialFindManyArgs";
import { Material } from "../../material/base/Material";
import { MaterialWhereUniqueInput } from "../../material/base/MaterialWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";

export class ScaffoldingControllerBase {
  constructor(protected readonly service: ScaffoldingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scaffolding })
  async createScaffolding(
    @common.Body() data: ScaffoldingCreateInput
  ): Promise<Scaffolding> {
    return await this.service.createScaffolding({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,
      },
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scaffolding] })
  @ApiNestedQuery(ScaffoldingFindManyArgs)
  async scaffoldings(@common.Req() request: Request): Promise<Scaffolding[]> {
    const args = plainToClass(ScaffoldingFindManyArgs, request.query);
    return this.service.scaffoldings({
      ...args,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scaffolding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scaffolding(
    @common.Param() params: ScaffoldingWhereUniqueInput
  ): Promise<Scaffolding | null> {
    const result = await this.service.scaffolding({
      where: params,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scaffolding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScaffolding(
    @common.Param() params: ScaffoldingWhereUniqueInput,
    @common.Body() data: ScaffoldingUpdateInput
  ): Promise<Scaffolding | null> {
    try {
      return await this.service.updateScaffolding({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,
        },
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scaffolding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScaffolding(
    @common.Param() params: ScaffoldingWhereUniqueInput
  ): Promise<Scaffolding | null> {
    try {
      return await this.service.deleteScaffolding({
        where: params,
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/materials")
  @ApiNestedQuery(MaterialFindManyArgs)
  async findMaterials(
    @common.Req() request: Request,
    @common.Param() params: ScaffoldingWhereUniqueInput
  ): Promise<Material[]> {
    const query = plainToClass(MaterialFindManyArgs, request.query);
    const results = await this.service.findMaterials(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/materials")
  async connectMaterials(
    @common.Param() params: ScaffoldingWhereUniqueInput,
    @common.Body() body: MaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      materials: {
        connect: body,
      },
    };
    await this.service.updateScaffolding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/materials")
  async updateMaterials(
    @common.Param() params: ScaffoldingWhereUniqueInput,
    @common.Body() body: MaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      materials: {
        set: body,
      },
    };
    await this.service.updateScaffolding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/materials")
  async disconnectMaterials(
    @common.Param() params: ScaffoldingWhereUniqueInput,
    @common.Body() body: MaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      materials: {
        disconnect: body,
      },
    };
    await this.service.updateScaffolding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: ScaffoldingWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        material: {
          select: {
            id: true,
          },
        },

        orderDate: true,

        project: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  async connectOrders(
    @common.Param() params: ScaffoldingWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateScaffolding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  async updateOrders(
    @common.Param() params: ScaffoldingWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateScaffolding({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  async disconnectOrders(
    @common.Param() params: ScaffoldingWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateScaffolding({
      where: params,
      data,
      select: { id: true },
    });
  }
}
