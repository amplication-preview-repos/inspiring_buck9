/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Scaffolding as PrismaScaffolding,
  Material as PrismaMaterial,
  Order as PrismaOrder,
  Client as PrismaClient,
} from "@prisma/client";

export class ScaffoldingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScaffoldingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scaffolding.count(args);
  }

  async scaffoldings(
    args: Prisma.ScaffoldingFindManyArgs
  ): Promise<PrismaScaffolding[]> {
    return this.prisma.scaffolding.findMany(args);
  }
  async scaffolding(
    args: Prisma.ScaffoldingFindUniqueArgs
  ): Promise<PrismaScaffolding | null> {
    return this.prisma.scaffolding.findUnique(args);
  }
  async createScaffolding(
    args: Prisma.ScaffoldingCreateArgs
  ): Promise<PrismaScaffolding> {
    return this.prisma.scaffolding.create(args);
  }
  async updateScaffolding(
    args: Prisma.ScaffoldingUpdateArgs
  ): Promise<PrismaScaffolding> {
    return this.prisma.scaffolding.update(args);
  }
  async deleteScaffolding(
    args: Prisma.ScaffoldingDeleteArgs
  ): Promise<PrismaScaffolding> {
    return this.prisma.scaffolding.delete(args);
  }

  async findMaterials(
    parentId: string,
    args: Prisma.MaterialFindManyArgs
  ): Promise<PrismaMaterial[]> {
    return this.prisma.scaffolding
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .materials(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.scaffolding
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.scaffolding
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}
