/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Scaffolding } from "./Scaffolding";
import { ScaffoldingCountArgs } from "./ScaffoldingCountArgs";
import { ScaffoldingFindManyArgs } from "./ScaffoldingFindManyArgs";
import { ScaffoldingFindUniqueArgs } from "./ScaffoldingFindUniqueArgs";
import { CreateScaffoldingArgs } from "./CreateScaffoldingArgs";
import { UpdateScaffoldingArgs } from "./UpdateScaffoldingArgs";
import { DeleteScaffoldingArgs } from "./DeleteScaffoldingArgs";
import { MaterialFindManyArgs } from "../../material/base/MaterialFindManyArgs";
import { Material } from "../../material/base/Material";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { Client } from "../../client/base/Client";
import { ScaffoldingService } from "../scaffolding.service";
@graphql.Resolver(() => Scaffolding)
export class ScaffoldingResolverBase {
  constructor(protected readonly service: ScaffoldingService) {}

  async _scaffoldingsMeta(
    @graphql.Args() args: ScaffoldingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Scaffolding])
  async scaffoldings(
    @graphql.Args() args: ScaffoldingFindManyArgs
  ): Promise<Scaffolding[]> {
    return this.service.scaffoldings(args);
  }

  @graphql.Query(() => Scaffolding, { nullable: true })
  async scaffolding(
    @graphql.Args() args: ScaffoldingFindUniqueArgs
  ): Promise<Scaffolding | null> {
    const result = await this.service.scaffolding(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Scaffolding)
  async createScaffolding(
    @graphql.Args() args: CreateScaffoldingArgs
  ): Promise<Scaffolding> {
    return await this.service.createScaffolding({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Scaffolding)
  async updateScaffolding(
    @graphql.Args() args: UpdateScaffoldingArgs
  ): Promise<Scaffolding | null> {
    try {
      return await this.service.updateScaffolding({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Scaffolding)
  async deleteScaffolding(
    @graphql.Args() args: DeleteScaffoldingArgs
  ): Promise<Scaffolding | null> {
    try {
      return await this.service.deleteScaffolding(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Material], { name: "materials" })
  async findMaterials(
    @graphql.Parent() parent: Scaffolding,
    @graphql.Args() args: MaterialFindManyArgs
  ): Promise<Material[]> {
    const results = await this.service.findMaterials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Order], { name: "orders" })
  async findOrders(
    @graphql.Parent() parent: Scaffolding,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  async getClient(
    @graphql.Parent() parent: Scaffolding
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
